{
  "_args": [
    [
      {
        "raw": "@hapi/joi@^15.0.0",
        "scope": "@hapi",
        "escapedName": "@hapi%2fjoi",
        "name": "@hapi/joi",
        "rawSpec": "^15.0.0",
        "spec": ">=15.0.0 <16.0.0",
        "type": "range"
      },
      "/Applications/XAMPP/xamppfiles/htdocs/movie/node_modules/workbox-build"
    ]
  ],
  "_from": "@hapi/joi@^15.0.0",
  "_hasShrinkwrap": false,
  "_id": "@hapi/joi@15.0.3",
  "_location": "/@hapi/joi",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/joi_15.0.3_1557735050358_0.6373122573816301"
  },
  "_npmUser": {
    "name": "marsup",
    "email": "nicolas@morel.io"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@hapi/joi@^15.0.0",
    "scope": "@hapi",
    "escapedName": "@hapi%2fjoi",
    "name": "@hapi/joi",
    "rawSpec": "^15.0.0",
    "spec": ">=15.0.0 <16.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/workbox-build"
  ],
  "_resolved": "https://registry.npmjs.org/@hapi/joi/-/joi-15.0.3.tgz",
  "_shasum": "e94568fd859e5e945126d5675e7dd218484638a7",
  "_shrinkwrap": null,
  "_spec": "@hapi/joi@^15.0.0",
  "_where": "/Applications/XAMPP/xamppfiles/htdocs/movie/node_modules/workbox-build",
  "bugs": {
    "url": "https://github.com/hapijs/joi/issues"
  },
  "dependencies": {
    "@hapi/address": "2.x.x",
    "@hapi/hoek": "6.x.x",
    "@hapi/topo": "3.x.x"
  },
  "description": "Object schema validation",
  "devDependencies": {
    "@hapi/code": "5.x.x",
    "@hapi/lab": "18.x.x",
    "hapitoc": "1.x.x"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-z6CesJ2YBwgVCi+ci8SI8zixoj8bGFn/vZb9MBPbSyoxsS2PnWYjHcyTM17VLK6tx64YVK38SDIh10hJypB+ig==",
    "shasum": "e94568fd859e5e945126d5675e7dd218484638a7",
    "tarball": "https://registry.npmjs.org/@hapi/joi/-/joi-15.0.3.tgz",
    "fileCount": 29,
    "unpackedSize": 193735,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc2SaKCRA9TVsSAnZWagAAf+YP/2Vkhb0X9tN4ekfLHdDy\nIkpyf/v5XM9sblIV1dA7GvnAZqBLqOKmLFGNpfy1VVPEptrxDTwHQNZWjyQc\ntQXnKeHqOHKCeja7IGuaBJdeN/Ib8UG86/hzk69l90eU+YfMFp3nQ/hzufvW\nKdWAybLOtcoS8itiIghHyzQBZLJHFx3nt5Fbw228xrKh5X1W3cQ6PcHmEReI\nS0yQ0cuHQ2fOTeHr+oB9oNW5bxpfdFo3bfv6mQhsSolzSdmusW5vQ7dsMo45\nfvdd4WLgPy05wqD5biBbjxKljiCDG3zQ3g0NiwsIFJvvE3d9L06BpcB/UkGz\nN0ijpl0pI0J4qMKHIzouUjqiXh8HOESIl2+baN5+DqLfrM9F4Al0NymxKvmh\ncnShLhef7V7eCKaHJYWIifESlhO6vGOKe9ZwbxHHGPrZVaoxz9NxbP/NxBMx\nv8jkstrRHhYgLhc0jO4FAt1y0UjP09saUrjf6o0RA6rRo5AycR2Jy34vgh4G\nNYHpDzXpfDTRuT6mGwYRTX34dQgZ1uq1VJkS1FiFtDc7oWdyInpzMKEsU8G5\n29EyqFfvWzHHXQZp6SUcfd7AtU+JXfP2Y7iMjbSkLBCi+B4l7hJMyI0N5p+C\n2b1wEH2igU2Ag2cd5lsDI5+Pks030vOpvU3/EJ5Oh6wgu1CLIFmevxqO+Fjp\nmPj0\r\n=8eQZ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "31088722970cafdbf41365cdfa9148df8ac179d4",
  "homepage": "https://github.com/hapijs/joi",
  "keywords": [
    "schema",
    "validation"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "hueniverse",
      "email": "eran@hammer.io"
    },
    {
      "name": "marsup",
      "email": "nicolas@morel.io"
    }
  ],
  "name": "@hapi/joi",
  "optionalDependencies": {},
  "readme": "<a href=\"http://hapijs.com\"><img src=\"https://raw.githubusercontent.com/hapijs/assets/master/images/family.png\" width=\"180px\" align=\"right\" /></a>\n\n# joi\n\nObject schema description language and validator for JavaScript objects.\n\n[![Build Status](https://travis-ci.org/hapijs/joi.svg?branch=master)](https://travis-ci.org/hapijs/joi)\n\n## Introduction\n\nImagine you run facebook and you want visitors to sign up on the website with real names and not something like `l337_p@nda` in the first name field. How would you define the limitations of what can be inputted and validate it against the set rules?\n\nThis is joi, joi allows you to create *blueprints* or *schemas* for JavaScript objects (an object that stores information) to ensure *validation* of key information.\n\n# Installation\n\n```cli \n npm install --save @hapi/joi\n ```\n\n## API\nSee the detailed [API Reference](https://github.com/hapijs/joi/blob/v15.0.3/API.md).\n\n## Example\n\n```javascript\nconst Joi = require('@hapi/joi');\n\nconst schema = Joi.object().keys({\n    username: Joi.string().alphanum().min(3).max(30).required(),\n    password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/),\n    access_token: [Joi.string(), Joi.number()],\n    birthyear: Joi.number().integer().min(1900).max(2013),\n    email: Joi.string().email({ minDomainSegments: 2 })\n}).with('username', 'birthyear').without('password', 'access_token');\n\n// Return result.\nconst result = Joi.validate({ username: 'abc', birthyear: 1994 }, schema);\n// result.error === null -> valid\n\n// You can also pass a callback which will be called synchronously with the validation result.\nJoi.validate({ username: 'abc', birthyear: 1994 }, schema, function (err, value) { });  // err === null -> valid\n\n```\n\nThe above schema defines the following constraints:\n* `username`\n    * a required string\n    * must contain only alphanumeric characters\n    * at least 3 characters long but no more than 30\n    * must be accompanied by `birthyear`\n* `password`\n    * an optional string\n    * must satisfy the custom regex\n    * cannot appear together with `access_token`\n* `access_token`\n    * an optional, unconstrained string or number\n* `birthyear`\n    * an integer between 1900 and 2013\n* `email`\n    * a valid email address string\n    * must have two domain parts e.g. `example.com`\n\n## Usage\n\nUsage is a two steps process. First, a schema is constructed using the provided types and constraints:\n\n```javascript\nconst schema = {\n    a: Joi.string()\n};\n```\n\nNote that **joi** schema objects are immutable which means every additional rule added (e.g. `.min(5)`) will return a\nnew schema object.\n\nSecond, the value is validated against the defined schema:\n\n```javascript\nconst {error, value} = Joi.validate({ a: 'a string' }, schema);\n\n// or\n\nJoi.validate({ a: 'a string' }, schema, function (error, value) { });\n```\n\nIf the input is valid, then the `error` will be `null`, otherwise it will be an `Error` object providing more information.\n\nThe schema can be a plain JavaScript object where every key is assigned a **joi** type, or it can be a **joi** type directly:\n\n```javascript\nconst schema = Joi.string().min(10);\n```\n\nIf the schema is a **joi** type, the `schema.validate(value, callback)` can be called directly on the type. When passing a non-type schema object,\nthe module converts it internally to an object() type equivalent to:\n\n```javascript\nconst schema = Joi.object().keys({\n    a: Joi.string()\n});\n```\n\nWhen validating a schema:\n\n* Values (or keys in case of objects) are optional by default.\n\n    ```javascript\n    Joi.validate(undefined, Joi.string()); // validates fine\n    ```\n\n    To disallow this behavior, you can either set the schema as `required()`, or set `presence` to `\"required\"` when passing `options`:\n\n    ```javascript\n    Joi.validate(undefined, Joi.string().required());\n    // or\n    Joi.validate(undefined, Joi.string(), /* options */ { presence: \"required\" });\n    ```\n\n* Strings are utf-8 encoded by default.\n* Rules are defined in an additive fashion and evaluated in order, first the inclusive rules, then the exclusive rules.\n\n## Browsers\n\nJoi doesn't directly support browsers, but you could use [joi-browser](https://github.com/jeffbski/joi-browser) for an ES5 build of Joi that works in browsers, or as a source of inspiration for your own builds.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/joi.git"
  },
  "scripts": {
    "test": "lab -t 100 -a @hapi/code -L",
    "test-cov-html": "lab -r html -o coverage.html -a @hapi/code",
    "toc": "hapitoc && node docs/check-errors-list.js",
    "version": "npm run toc && git add API.md README.md"
  },
  "version": "15.0.3"
}
