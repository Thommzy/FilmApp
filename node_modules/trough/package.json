{
  "_args": [
    [
      {
        "raw": "trough@^1.0.0",
        "scope": null,
        "escapedName": "trough",
        "name": "trough",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Applications/XAMPP/xamppfiles/htdocs/movie/node_modules/unified"
    ]
  ],
  "_from": "trough@^1.0.0",
  "_hasShrinkwrap": false,
  "_id": "trough@1.0.4",
  "_location": "/trough",
  "_nodeVersion": "11.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/trough_1.0.4_1557825081403_0.1279159862776782"
  },
  "_npmUser": {
    "name": "wooorm",
    "email": "tituswormer@gmail.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "trough@^1.0.0",
    "scope": null,
    "escapedName": "trough",
    "name": "trough",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/unified"
  ],
  "_resolved": "https://registry.npmjs.org/trough/-/trough-1.0.4.tgz",
  "_shasum": "3b52b1f13924f460c3fbfd0df69b587dbcbc762e",
  "_shrinkwrap": null,
  "_spec": "trough@^1.0.0",
  "_where": "/Applications/XAMPP/xamppfiles/htdocs/movie/node_modules/unified",
  "author": {
    "name": "Titus Wormer",
    "email": "tituswormer@gmail.com",
    "url": "https://wooorm.com"
  },
  "bugs": {
    "url": "https://github.com/wooorm/trough/issues"
  },
  "contributors": [
    {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "https://wooorm.com"
    }
  ],
  "dependencies": {},
  "description": "Middleware: a channel used to convey a liquid",
  "devDependencies": {
    "browserify": "^16.0.0",
    "nyc": "^14.0.0",
    "prettier": "^1.12.0",
    "remark-cli": "^6.0.0",
    "remark-preset-wooorm": "^4.0.0",
    "tape": "^4.4.0",
    "tinyify": "^2.4.3",
    "xo": "^0.24.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-tdzBRDGWcI1OpPVmChbdSKhvSVurznZ8X36AYURAcl+0o2ldlCY2XPzyXNNxwJwwyIU+rIglTCG4kxtNKBQH7Q==",
    "shasum": "3b52b1f13924f460c3fbfd0df69b587dbcbc762e",
    "tarball": "https://registry.npmjs.org/trough/-/trough-1.0.4.tgz",
    "fileCount": 5,
    "unpackedSize": 12994,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc2oY6CRA9TVsSAnZWagAAnVIP/39EbwhVxIMt9IWBNsp/\n1nqumCo+bF0THpXkviS/VMIUtl2ePtKTNKn09U34ELyakJQcHUw+THfvkoL3\nAjrW4jQhP7K1ap0ScjI5v5pxXA44LTFfw8UunT86Omlxavk4WmIuvBrXQeLV\nCdJyG0UoTFkOroCpDKaB2UX5mOPhoCnTM4SPhAMjb8/RoI7JyVYrgcXLkcmI\nGwoen3KYygTA988vhMgFxgDef89Ha87fSyISaw/4zTM/ug2Q7L9VAReC2isj\n8rTdZRe5zurU8M01N49tTu8X1wonw1b6UATC6TdDZE35m9/CksvorzBYGrUl\n5o/ndxEogKhcjqLfA6Vwqheeppr0LIq6x3vi8wby9B2AOr/X7Ki0xo4jVHOk\np5YyTPFNRJdGLK8Bg2XmWJos2R5f6eJt1Vnewt7GwqGPJZU7GjejpkpltToZ\nmMgxPEIT9+hGt++RvHmiIYoT+i/lZab6PJhb2gufRkMQu2pzRMjoiX5WzS77\nwCiUCST6iisYIB5g/otcpas9ky4ynuVfZPS9gKIG3oh/6cOkY1DnIT2b6L5x\nYBD13QiCyjbueHYzHrSK0QmhzVO86mpUaM9Dk+UIVlfYUaYk1kOvU2yLdIZb\nti73bSLZB/NmwYsfnRCeKZp+C4npOJcR/50HwJgYsMtTqpR+6UpQdhsrjhjo\ndyvh\r\n=I3L1\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.js",
    "wrap.js"
  ],
  "gitHead": "663811420b859bfbf9653d7d02d0d26e62aaee6d",
  "homepage": "https://github.com/wooorm/trough#readme",
  "keywords": [
    "middleware",
    "ware"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "wooorm",
      "email": "tituswormer@gmail.com"
    }
  ],
  "name": "trough",
  "nyc": {
    "check-coverage": true,
    "lines": 100,
    "functions": 100,
    "branches": 100
  },
  "optionalDependencies": {},
  "prettier": {
    "tabWidth": 2,
    "useTabs": false,
    "singleQuote": true,
    "bracketSpacing": false,
    "semi": false,
    "trailingComma": "none"
  },
  "readme": "# trough\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n\n> **trough** /trôf/ — a channel used to convey a liquid.\n\n`trough` is like [`ware`][ware] with less sugar, and middleware\nfunctions can change the input of the next.\n\n## Installation\n\n[npm][]:\n\n```bash\nnpm install trough\n```\n\n## Usage\n\n```js\nvar fs = require('fs')\nvar path = require('path')\nvar trough = require('trough')\n\nvar pipeline = trough()\n  .use(function(fileName) {\n    console.log('Checking... ' + fileName)\n  })\n  .use(function(fileName) {\n    return path.join(process.cwd(), fileName)\n  })\n  .use(function(filePath, next) {\n    fs.stat(filePath, function(err, stats) {\n      next(err, {filePath, stats})\n    })\n  })\n  .use(function(ctx, next) {\n    if (ctx.stats.isFile()) {\n      fs.readFile(ctx.filePath, next)\n    } else {\n      next(new Error('Expected file'))\n    }\n  })\n\npipeline.run('readme.md', console.log)\npipeline.run('node_modules', console.log)\n```\n\nYields:\n\n```txt\nChecking... readme.md\nChecking... node_modules\nError: Expected file\n    at ~/example.js:21:12\n    at wrapped (~/node_modules/trough/index.js:93:19)\n    at next (~/node_modules/trough/index.js:56:24)\n    at done (~/node_modules/trough/index.js:124:12)\n    at ~/node_modules/example.js:14:7\n    at FSReqWrap.oncomplete (fs.js:153:5)\nnull <Buffer 23 20 74 72 6f 75 67 68 20 5b 21 5b 42 75 69 6c 64 20 53 74 61 74 75 73 5d 5b 74 72 61 76 69 73 2d 62 61 64 67 65 5d 5d 5b 74 72 61 76 69 73 5d 20 5b ... >\n```\n\n## API\n\n### `trough()`\n\nCreate a new [`Trough`][trough].\n\n#### `trough.wrap(middleware, callback[, ...input])`\n\nCall `middleware` with all input.\nIf `middleware` accepts more arguments than given in input, and extra `done`\nfunction is passed in after the input when calling it.\nIt must be called.\n\nThe first value in `input` is called the main input value.\nAll other input values are called the rest input values.\nThe values given to `callback` are the input values, merged with every\nnon-nully output value.\n\n*   If `middleware` throws an error, returns a promise that is rejected, or\n    calls the given `done` function with an error, `callback` is invoked with\n    that error\n*   If `middleware` returns a value or returns a promise that is resolved, that\n    value is the main output value\n*   If `middleware` calls `done`, all non-nully values except for the first one\n    (the error) overwrite the output values\n\n### `Trough`\n\nA pipeline.\n\n#### `Trough#run([input..., ]done)`\n\nRun the pipeline (all [`use()`][use]d middleware).  Invokes [`done`][done]\non completion with either an error or the output of the last middleware\n\n> Note! as the length of input defines whether [async][] functions get a `next`\n> function, it’s recommended to keep `input` at one value normally.\n\n##### `function done(err?, [output...])`\n\nThe final handler passed to [`run()`][run], invoked with an error\nif a [middleware function][fn] rejected, passed, or threw one, or\nthe output of the last middleware function.\n\n#### `Trough#use(fn)`\n\nAdd `fn`, a [middleware function][fn], to the pipeline.\n\n##### `function fn([input..., ][next])`\n\nA middleware function invoked with the output of its predecessor.\n\n###### Synchronous\n\nIf `fn` returns or throws an error, the pipeline fails and `done` is\ninvoked with that error.\n\nIf `fn` returns a value (neither `null` nor `undefined`), the first\n`input` of the next function is set to that value (all other `input`\nis passed through).\n\nThe following example shows how returning an error stops the pipeline:\n\n```js\nvar trough = require('trough')\n\ntrough()\n  .use(function(val) {\n    return new Error('Got: ' + val)\n  })\n  .run('some value', console.log)\n```\n\nYields:\n\n```txt\nError: Got: some value\n    at ~/example.js:5:12\n    ...\n```\n\nThe following example shows how throwing an error stops the pipeline:\n\n```js\nvar trough = require('trough')\n\ntrough()\n  .use(function(val) {\n    throw new Error('Got: ' + val)\n  })\n  .run('more value', console.log)\n```\n\nYields:\n\n```txt\nError: Got: more value\n    at ~/example.js:5:11\n    ...\n```\n\nThe following example shows how the first output can be modified:\n\n```js\nvar trough = require('trough')\n\ntrough()\n  .use(function(val) {\n    return 'even ' + val\n  })\n  .run('more value', 'untouched', console.log)\n```\n\nYields:\n\n```txt\nnull 'even more value' 'untouched'\n```\n\n###### Promise\n\nIf `fn` returns a promise, and that promise rejects, the pipeline fails\nand `done` is invoked with the rejected value.\n\nIf `fn` returns a promise, and that promise resolves with a value\n(neither `null` nor `undefined`), the first `input` of the next function\nis set to that value (all other `input` is passed through).\n\nThe following example shows how rejecting a promise stops the pipeline:\n\n```js\nvar trough = require('trough')\n\ntrough()\n  .use(function(val) {\n    return new Promise(function(resolve, reject) {\n      reject('Got: ' + val)\n    })\n  })\n  .run('val', console.log)\n```\n\nYields:\n\n```txt\nGot: val\n```\n\nThe following example shows how the input isn’t touched by resolving\nto `null`.\n\n```js\nvar trough = require('trough')\n\ntrough()\n  .use(function() {\n    return new Promise(function(resolve) {\n      setTimeout(function() {\n        resolve(null)\n      }, 100)\n    })\n  })\n  .run('Input', console.log)\n```\n\nYields:\n\n```txt\nnull 'Input'\n```\n\n###### Asynchronous\n\nIf `fn` accepts one more argument than the given `input`, a `next`\nfunction is given (after the input).  `next` must be called, but doesn’t\nhave to be called async.\n\nIf `next` is given a value (neither `null` nor `undefined`) as its first\nargument, the pipeline fails and `done` is invoked with that value.\n\nIf `next` is given no value (either `null` or `undefined`) as the first\nargument, all following non-nully values change the input of the following\nfunction, and all nully values default to the `input`.\n\nThe following example shows how passing a first argument stops the\npipeline:\n\n```js\nvar trough = require('trough')\n\ntrough()\n  .use(function(val, next) {\n    next(new Error('Got: ' + val))\n  })\n  .run('val', console.log)\n```\n\nYields:\n\n```txt\nError: Got: val\n    at ~/example.js:5:10\n```\n\nThe following example shows how more values than the input are passed.\n\n```js\nvar trough = require('trough')\n\ntrough()\n  .use(function(val, next) {\n    setTimeout(function() {\n      next(null, null, 'values')\n    }, 100)\n  })\n  .run('some', console.log)\n```\n\nYields:\n\n```txt\nnull 'some' 'values'\n```\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://img.shields.io/travis/wooorm/trough.svg\n\n[build]: https://travis-ci.org/wooorm/trough\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/trough.svg\n\n[coverage]: https://codecov.io/github/wooorm/trough\n\n[downloads-badge]: https://img.shields.io/npm/dm/trough.svg\n\n[downloads]: https://www.npmjs.com/package/trough\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/trough.svg\n\n[size]: https://bundlephobia.com/result?p=trough\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[ware]: https://github.com/segmentio/ware\n\n[trough]: #trough-1\n\n[use]: #troughusefn\n\n[run]: #troughruninput-done\n\n[fn]: #function-fninput-next\n\n[done]: #function-doneerr-output\n\n[async]: #asynchronous\n",
  "readmeFilename": "readme.md",
  "remarkConfig": {
    "plugins": [
      "preset-wooorm"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wooorm/trough.git"
  },
  "scripts": {
    "build": "npm run build-bundle && npm run build-mangle",
    "build-bundle": "browserify index.js -s trough > trough.js",
    "build-mangle": "browserify index.js -s trough -p tinyify > trough.min.js",
    "format": "remark . -qfo && prettier --write \"**/*.js\" && xo --fix",
    "test": "npm run format && npm run build && npm run test-coverage",
    "test-api": "node test",
    "test-coverage": "nyc --reporter lcov tape test.js"
  },
  "version": "1.0.4",
  "xo": {
    "prettier": true,
    "esnext": false,
    "rules": {
      "guard-for-in": "off",
      "unicorn/prefer-type-error": "off"
    },
    "ignores": [
      "trough.js"
    ]
  }
}
